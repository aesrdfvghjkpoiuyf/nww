{"ast":null,"code":"const registerDirectCallListeners = (call, dispatchUpdate) => {\n  call.onEstablished = call => {\n    dispatchUpdate({\n      callState: 'established'\n    });\n  };\n  call.onConnected = call => {\n    dispatchUpdate({\n      callState: 'connected'\n    });\n  };\n  call.onReconnected = call => {\n    dispatchUpdate({\n      callState: 'reconnected'\n    });\n  };\n  call.onReconnecting = call => {\n    dispatchUpdate({\n      callState: 'reconnecting'\n    });\n  };\n  call.onEnded = call => {\n    dispatchUpdate({\n      callState: 'ended'\n    });\n  };\n  call.onRemoteAudioSettingsChanged = call => {\n    dispatchUpdate({\n      isRemoteAudioEnabled: call.isRemoteAudioEnabled\n    });\n  };\n  call.onRemoteVideoSettingsChanged = call => {\n    dispatchUpdate({\n      isRemoteVideoEnabled: call.isRemoteVideoEnabled\n    });\n  };\n  // onCustomItemsUpdated() {\n  //\n  // },\n  // onCustomItemsDeleted() {\n  //\n  // },\n};\nexport const statefyRoom = (room, dispatch) => {\n  const dispatchUpdate = part => {\n    const payload = {\n      roomId: room.roomId,\n      ...part\n    };\n    dispatch({\n      type: 'UPDATE_ROOM',\n      payload\n    });\n  };\n  const updateRoom = () => {\n    dispatchUpdate(statefyRoom(room, dispatch));\n  };\n  const updateLocalParticipant = participant => {\n    dispatch({\n      type: 'UPDATE_ROOM_LOCAL_PARTICIPANT',\n      payload: {\n        roomId: room.roomId,\n        participant\n      }\n    });\n  };\n  const upsertRemoteParticipant = participant => {\n    dispatch({\n      type: 'UPSERT_ROOM_REMOTE_PARTICIPANT',\n      payload: {\n        roomId: room.roomId,\n        participant: statefyRemoteParticipant(participant)\n      }\n    });\n  };\n  const deleteRemoteParticipant = participant => {\n    dispatch({\n      type: 'DELETE_ROOM_REMOTE_PARTICIPANT',\n      payload: {\n        roomId: room.roomId,\n        participantId: participant.participantId\n      }\n    });\n  };\n  const statefulLocalParticipants = room.localParticipant ? [statefyLocalParticipant(room.localParticipant, updateLocalParticipant)] : [];\n  const statefulRemoteParticipants = room.remoteParticipants.map(statefyRemoteParticipant);\n  const statefulParticipants = [...statefulLocalParticipants, ...statefulRemoteParticipants];\n  room.on('remoteParticipantEntered', upsertRemoteParticipant);\n  room.on('remoteParticipantStreamStarted', upsertRemoteParticipant);\n  room.on('remoteParticipantExited', deleteRemoteParticipant);\n  room.on('remoteAudioSettingsChanged', upsertRemoteParticipant);\n  room.on('remoteVideoSettingsChanged', upsertRemoteParticipant);\n  room.on('error', error => {\n    console.error(error); // TODO:\n  });\n  return {\n    roomId: room.roomId,\n    roomType: room.roomType,\n    createdAt: room.createdAt,\n    createdBy: room.createdBy,\n    participants: statefulParticipants,\n    localParticipant: statefulLocalParticipants[0],\n    remoteParticipants: statefulRemoteParticipants,\n    enter(params) {\n      return room.enter(params).then(() => {\n        updateRoom();\n        return;\n      });\n    },\n    exit() {\n      room.exit();\n      updateRoom();\n    }\n  };\n};\nexport const statefyLocalParticipant = (participant, update) => {\n  return {\n    participantId: participant.participantId,\n    enteredAt: participant.enteredAt,\n    updatedAt: participant.updatedAt,\n    exitedAt: participant.exitedAt,\n    duration: participant.duration,\n    isLocalParticipant: participant.isLocalParticipant,\n    state: participant.state,\n    user: participant.user,\n    // TODO: Statefy user\n    isAudioEnabled: participant.isAudioEnabled,\n    isVideoEnabled: participant.isVideoEnabled,\n    setMediaView(mediaView) {\n      return participant.setMediaView(mediaView);\n    },\n    setLocalMediaView(mediaView) {\n      return participant.setLocalMediaView(mediaView);\n    },\n    muteMicrophone() {\n      participant.muteMicrophone();\n      update({\n        isAudioEnabled: false\n      });\n    },\n    unmuteMicrophone() {\n      participant.unmuteMicrophone();\n      update({\n        isAudioEnabled: true\n      });\n    },\n    startVideo() {\n      participant.startVideo();\n      update({\n        isVideoEnabled: true\n      });\n    },\n    stopVideo() {\n      participant.stopVideo();\n      update({\n        isVideoEnabled: false\n      });\n    }\n  };\n};\nexport const statefyRemoteParticipant = participant => {\n  return {\n    participantId: participant.participantId,\n    enteredAt: participant.enteredAt,\n    updatedAt: participant.updatedAt,\n    exitedAt: participant.exitedAt,\n    duration: participant.duration,\n    isLocalParticipant: participant.isLocalParticipant,\n    state: participant.state,\n    user: participant.user,\n    // TODO: Statefy user\n    isAudioEnabled: participant.isAudioEnabled,\n    isVideoEnabled: participant.isVideoEnabled,\n    setMediaView(mediaView) {\n      return participant.setMediaView(mediaView);\n    }\n  };\n};\nexport const statefyDirectCall = (call, dispatch, registerListener = true) => {\n  const dispatchUpdate = part => {\n    const payload = {\n      callId: call.callId,\n      ...part\n    };\n    dispatch({\n      type: 'UPDATE_CALL',\n      payload\n    });\n  };\n  if (registerListener) {\n    registerDirectCallListeners(call, dispatchUpdate);\n  }\n  return {\n    callState: call.localUser.userId === call.caller.userId ? 'dialing' : 'ringing',\n    callId: call.callId,\n    caller: call.caller,\n    // This should not mutate\n    callee: call.callee,\n    // This should not mutate\n    isVideoCall: call.isVideoCall,\n    localUser: call.localUser,\n    // This should not mutate\n    remoteUser: call.remoteUser,\n    // This should not mutate\n    isLocalAudioEnabled: call.isLocalAudioEnabled,\n    isRemoteAudioEnabled: call.isRemoteAudioEnabled,\n    isLocalVideoEnabled: call.isLocalVideoEnabled,\n    isRemoteVideoEnabled: call.isRemoteVideoEnabled,\n    myRole: call.myRole,\n    isOngoing: call.isOngoing,\n    endedBy: call.endedBy,\n    // This should not mutate\n    isEnded: call.isEnded,\n    endResult: call.endResult,\n    // callLog: call.callLog, // This should not mutate\n    // customItems: call.customItems, // This should not mutate\n    localMediaView: call.localMediaView,\n    remoteMediaView: call.remoteMediaView,\n    setLocalMediaView(mediaView) {\n      dispatchUpdate({\n        localMediaView: mediaView\n      });\n      return call.setLocalMediaView(mediaView);\n    },\n    setRemoteMediaView(mediaView) {\n      dispatchUpdate({\n        remoteMediaView: mediaView\n      });\n      return call.setRemoteMediaView(mediaView);\n    },\n    stopVideo() {\n      dispatchUpdate({\n        isLocalVideoEnabled: false\n      });\n      return call.stopVideo();\n    },\n    startVideo() {\n      dispatchUpdate({\n        isLocalVideoEnabled: true\n      });\n      return call.startVideo();\n    },\n    getDuration() {\n      return call.getDuration();\n    },\n    accept(params) {\n      return call.accept(params);\n    },\n    end() {\n      return call.end();\n    },\n    muteMicrophone() {\n      dispatchUpdate({\n        isLocalAudioEnabled: false\n      });\n      return call.muteMicrophone();\n    },\n    unmuteMicrophone() {\n      dispatchUpdate({\n        isLocalAudioEnabled: true\n      });\n      return call.unmuteMicrophone();\n    }\n\n    // captureLocalVideoView(callback?) {\n    //   return call.captureLocalVideoView(callback);\n    // },\n    // captureRemoteVideoView(callback?) {\n    //   return call.captureRemoteVideoView(callback);\n    // },\n\n    // updateCustomItems(customItems, callback?): Promise<> {\n    // },\n    // deleteCustomItems(customItemsKeys: string[], callback?): Promise<> {\n    // },\n    // deleteAllCustomItems(callback?): Promise<> {\n    // },\n\n    // startRecording(options): string {\n    // },\n    // stopRecording(recordingId: string): boolean {\n    // },\n  };\n};","map":{"version":3,"names":["registerDirectCallListeners","call","dispatchUpdate","onEstablished","callState","onConnected","onReconnected","onReconnecting","onEnded","onRemoteAudioSettingsChanged","isRemoteAudioEnabled","onRemoteVideoSettingsChanged","isRemoteVideoEnabled","statefyRoom","room","dispatch","part","payload","roomId","type","updateRoom","updateLocalParticipant","participant","upsertRemoteParticipant","statefyRemoteParticipant","deleteRemoteParticipant","participantId","statefulLocalParticipants","localParticipant","statefyLocalParticipant","statefulRemoteParticipants","remoteParticipants","map","statefulParticipants","on","error","console","roomType","createdAt","createdBy","participants","enter","params","then","exit","update","enteredAt","updatedAt","exitedAt","duration","isLocalParticipant","state","user","isAudioEnabled","isVideoEnabled","setMediaView","mediaView","setLocalMediaView","muteMicrophone","unmuteMicrophone","startVideo","stopVideo","statefyDirectCall","registerListener","callId","localUser","userId","caller","callee","isVideoCall","remoteUser","isLocalAudioEnabled","isLocalVideoEnabled","myRole","isOngoing","endedBy","isEnded","endResult","localMediaView","remoteMediaView","setRemoteMediaView","getDuration","accept","end"],"sources":["C:/Users/HP/Desktop/neeee/quickstart-calls-reactjs/sample-01/src/lib/sendbird-calls/SbCallsContext/statefy.tsx"],"sourcesContent":["import type { Action } from './reducer';\r\nimport type {\r\n  StatefulDirectCall,\r\n  StatefulLocalParticipant,\r\n  StatefulRemoteParticipant,\r\n  StatefulRoom,\r\n} from './types';\r\nimport type { DirectCall, LocalParticipant, Participant, RemoteParticipant, Room } from 'sendbird-calls';\r\n\r\nconst registerDirectCallListeners = (\r\n  call: DirectCall,\r\n  dispatchUpdate: (part: Partial<StatefulDirectCall>) => void,\r\n) => {\r\n  call.onEstablished = (call: DirectCall) => {\r\n    dispatchUpdate({ callState: 'established' });\r\n  };\r\n  call.onConnected = (call: DirectCall) => {\r\n    dispatchUpdate({ callState: 'connected' });\r\n  };\r\n  call.onReconnected = (call: DirectCall) => {\r\n    dispatchUpdate({ callState: 'reconnected' });\r\n  };\r\n  call.onReconnecting = (call: DirectCall) => {\r\n    dispatchUpdate({ callState: 'reconnecting' });\r\n  };\r\n  call.onEnded = (call: DirectCall) => {\r\n    dispatchUpdate({ callState: 'ended' });\r\n  };\r\n  call.onRemoteAudioSettingsChanged = (call: DirectCall) => {\r\n    dispatchUpdate({ isRemoteAudioEnabled: call.isRemoteAudioEnabled });\r\n  };\r\n  call.onRemoteVideoSettingsChanged = (call: DirectCall) => {\r\n    dispatchUpdate({ isRemoteVideoEnabled: call.isRemoteVideoEnabled });\r\n  };\r\n  // onCustomItemsUpdated() {\r\n  //\r\n  // },\r\n  // onCustomItemsDeleted() {\r\n  //\r\n  // },\r\n};\r\n\r\nexport const statefyRoom = (\r\n  room: Room,\r\n  dispatch: React.Dispatch<Action>,\r\n): StatefulRoom => {\r\n  const dispatchUpdate = (part: Partial<StatefulRoom>) => {\r\n    const payload = {\r\n      roomId: room.roomId,\r\n      ...part,\r\n    };\r\n    dispatch({ type: 'UPDATE_ROOM', payload });\r\n  };\r\n\r\n  const updateRoom = () => {\r\n    dispatchUpdate(statefyRoom(room, dispatch));\r\n  };\r\n\r\n  const updateLocalParticipant = (participant: Partial<StatefulLocalParticipant>) => {\r\n    dispatch({\r\n      type: 'UPDATE_ROOM_LOCAL_PARTICIPANT',\r\n      payload: {\r\n        roomId: room.roomId,\r\n        participant,\r\n      },\r\n    });\r\n  };\r\n  const upsertRemoteParticipant = (participant: RemoteParticipant) => {\r\n    dispatch({\r\n      type: 'UPSERT_ROOM_REMOTE_PARTICIPANT',\r\n      payload: {\r\n        roomId: room.roomId,\r\n        participant: statefyRemoteParticipant(participant),\r\n      },\r\n    });\r\n  };\r\n\r\n  const deleteRemoteParticipant = (participant: RemoteParticipant) => {\r\n    dispatch({\r\n      type: 'DELETE_ROOM_REMOTE_PARTICIPANT',\r\n      payload: {\r\n        roomId: room.roomId,\r\n        participantId: participant.participantId,\r\n      }\r\n    })\r\n  }\r\n\r\n  const statefulLocalParticipants = room.localParticipant ? [statefyLocalParticipant(room.localParticipant, updateLocalParticipant)] : [];\r\n  const statefulRemoteParticipants = room.remoteParticipants.map(statefyRemoteParticipant);\r\n  const statefulParticipants = [...statefulLocalParticipants, ...statefulRemoteParticipants];\r\n\r\n  room.on('remoteParticipantEntered', upsertRemoteParticipant);\r\n  room.on('remoteParticipantStreamStarted', upsertRemoteParticipant);\r\n  room.on('remoteParticipantExited', deleteRemoteParticipant);\r\n  room.on('remoteAudioSettingsChanged', upsertRemoteParticipant);\r\n  room.on('remoteVideoSettingsChanged', upsertRemoteParticipant);\r\n  room.on('error', error => {\r\n    console.error(error); // TODO:\r\n  });\r\n  return {\r\n    roomId: room.roomId,\r\n    roomType: room.roomType,\r\n    createdAt: room.createdAt,\r\n    createdBy: room.createdBy,\r\n    participants: statefulParticipants,\r\n    localParticipant: statefulLocalParticipants[0],\r\n    remoteParticipants: statefulRemoteParticipants,\r\n    enter(params) {\r\n      return room.enter(params).then(() => {\r\n        updateRoom();\r\n        return;\r\n      });\r\n    },\r\n    exit() {\r\n      room.exit();\r\n      updateRoom();\r\n    },\r\n  };\r\n};\r\n\r\nexport const statefyLocalParticipant = (\r\n  participant: LocalParticipant,\r\n  update: (participant: Partial<StatefulLocalParticipant>) => any,\r\n): StatefulLocalParticipant => {\r\n  return {\r\n    participantId: participant.participantId,\r\n    enteredAt: participant.enteredAt,\r\n    updatedAt: participant.updatedAt,\r\n    exitedAt: participant.exitedAt,\r\n    duration: participant.duration,\r\n    isLocalParticipant: participant.isLocalParticipant,\r\n    state: participant.state,\r\n    user: participant.user, // TODO: Statefy user\r\n    isAudioEnabled: participant.isAudioEnabled,\r\n    isVideoEnabled: participant.isVideoEnabled,\r\n    setMediaView(mediaView: HTMLMediaElement) {\r\n      return participant.setMediaView(mediaView);\r\n    },\r\n    setLocalMediaView(mediaView: HTMLMediaElement) {\r\n      return participant.setLocalMediaView(mediaView);\r\n    },\r\n    muteMicrophone() {\r\n      participant.muteMicrophone();\r\n      update({ isAudioEnabled: false });\r\n    },\r\n    unmuteMicrophone() {\r\n      participant.unmuteMicrophone();\r\n      update({ isAudioEnabled: true });\r\n    },\r\n    startVideo() {\r\n      participant.startVideo();\r\n      update({ isVideoEnabled: true });\r\n    },\r\n    stopVideo() {\r\n      participant.stopVideo();\r\n      update({ isVideoEnabled: false });\r\n    },\r\n  };\r\n};\r\n\r\nexport const statefyRemoteParticipant = (\r\n  participant: RemoteParticipant,\r\n): StatefulRemoteParticipant => {\r\n  return {\r\n    participantId: participant.participantId,\r\n    enteredAt: participant.enteredAt,\r\n    updatedAt: participant.updatedAt,\r\n    exitedAt: participant.exitedAt,\r\n    duration: participant.duration,\r\n    isLocalParticipant: participant.isLocalParticipant,\r\n    state: participant.state,\r\n    user: participant.user, // TODO: Statefy user\r\n    isAudioEnabled: participant.isAudioEnabled,\r\n    isVideoEnabled: participant.isVideoEnabled,\r\n    setMediaView(mediaView: HTMLMediaElement) {\r\n      return participant.setMediaView(mediaView);\r\n    },\r\n  };\r\n};\r\n\r\nexport const statefyDirectCall = (\r\n  call: DirectCall,\r\n  dispatch: React.Dispatch<Action>,\r\n  registerListener: boolean = true,\r\n): StatefulDirectCall => {\r\n  const dispatchUpdate = (part: Partial<StatefulDirectCall>) => {\r\n    const payload = {\r\n      callId: call.callId,\r\n      ...part,\r\n    };\r\n    dispatch({ type: 'UPDATE_CALL', payload });\r\n  };\r\n\r\n  if (registerListener) {\r\n    registerDirectCallListeners(call, dispatchUpdate);\r\n  }\r\n\r\n  return {\r\n    callState: (call.localUser.userId === call.caller.userId) ? 'dialing' : 'ringing',\r\n    callId: call.callId,\r\n    caller: call.caller, // This should not mutate\r\n    callee: call.callee, // This should not mutate\r\n    isVideoCall: call.isVideoCall,\r\n    localUser: call.localUser, // This should not mutate\r\n    remoteUser: call.remoteUser, // This should not mutate\r\n    isLocalAudioEnabled: call.isLocalAudioEnabled,\r\n    isRemoteAudioEnabled: call.isRemoteAudioEnabled,\r\n    isLocalVideoEnabled: call.isLocalVideoEnabled,\r\n    isRemoteVideoEnabled: call.isRemoteVideoEnabled,\r\n    myRole: call.myRole,\r\n    isOngoing: call.isOngoing,\r\n    endedBy: call.endedBy, // This should not mutate\r\n    isEnded: call.isEnded,\r\n    endResult: call.endResult,\r\n    // callLog: call.callLog, // This should not mutate\r\n    // customItems: call.customItems, // This should not mutate\r\n    localMediaView: call.localMediaView,\r\n    remoteMediaView: call.remoteMediaView,\r\n\r\n    setLocalMediaView(mediaView) {\r\n      dispatchUpdate({ localMediaView: mediaView });\r\n      return call.setLocalMediaView(mediaView);\r\n    },\r\n    setRemoteMediaView(mediaView) {\r\n      dispatchUpdate({ remoteMediaView: mediaView });\r\n      return call.setRemoteMediaView(mediaView);\r\n    },\r\n\r\n    stopVideo() {\r\n      dispatchUpdate({ isLocalVideoEnabled: false });\r\n      return call.stopVideo();\r\n    },\r\n    startVideo() {\r\n      dispatchUpdate({ isLocalVideoEnabled: true });\r\n      return call.startVideo();\r\n    },\r\n    getDuration() {\r\n      return call.getDuration();\r\n    },\r\n    accept(params) {\r\n      return call.accept(params);\r\n    },\r\n    end() {\r\n      return call.end();\r\n    },\r\n\r\n    muteMicrophone() {\r\n      dispatchUpdate({ isLocalAudioEnabled: false });\r\n      return call.muteMicrophone();\r\n    },\r\n    unmuteMicrophone() {\r\n      dispatchUpdate({ isLocalAudioEnabled: true });\r\n      return call.unmuteMicrophone();\r\n    },\r\n\r\n    // captureLocalVideoView(callback?) {\r\n    //   return call.captureLocalVideoView(callback);\r\n    // },\r\n    // captureRemoteVideoView(callback?) {\r\n    //   return call.captureRemoteVideoView(callback);\r\n    // },\r\n\r\n    // updateCustomItems(customItems, callback?): Promise<> {\r\n    // },\r\n    // deleteCustomItems(customItemsKeys: string[], callback?): Promise<> {\r\n    // },\r\n    // deleteAllCustomItems(callback?): Promise<> {\r\n    // },\r\n\r\n    // startRecording(options): string {\r\n    // },\r\n    // stopRecording(recordingId: string): boolean {\r\n    // },\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}