{"ast":null,"code":"import { castDraft, produce } from 'immer';\nimport { initialState } from './state';\n\n/** Actions */\n\n/** Reducer */\nexport const reducer = (prevState, action) => {\n  switch (action.type) {\n    case 'AUTH':\n      return produce(prevState, draft => {\n        draft.user = action.payload;\n      });\n    case 'DEAUTH':\n      return initialState;\n    case 'ADD_CALL':\n      return produce(prevState, draft => {\n        draft.calls.push(castDraft(action.payload));\n      });\n    case 'RINGING':\n      {\n        const isBusy = prevState.calls.some(call => !call.isEnded);\n        const call = action.payload;\n        if (isBusy) {\n          call.end();\n        }\n        return produce(prevState, draft => {\n          draft.calls.push(castDraft(call));\n        });\n      }\n    case 'UPDATE_CALL':\n      return produce(prevState, draft => {\n        const index = draft.calls.findIndex(c => c.callId === action.payload.callId);\n        if (index === -1) return;\n        Object.assign(draft.calls[index], castDraft(action.payload));\n      });\n    case 'CLEAR_CALLS':\n      return produce(prevState, draft => {\n        draft.calls = castDraft(initialState.calls);\n      });\n    case 'ADD_ROOM':\n      return produce(prevState, draft => {\n        draft.rooms.push(castDraft(action.payload));\n      });\n    case 'UPDATE_ROOM':\n      return produce(prevState, draft => {\n        const index = draft.rooms.findIndex(c => c.roomId === action.payload.roomId);\n        if (index === -1) return;\n        Object.assign(draft.rooms[index], castDraft(action.payload));\n      });\n    case 'UPDATE_ROOM_LOCAL_PARTICIPANT':\n      return produce(prevState, draft => {\n        const {\n          roomId,\n          participant\n        } = action.payload;\n        const room = draft.rooms.find(c => c.roomId === roomId);\n        if (!room) return;\n        const pIndex = room.participants.findIndex(p => p.participantId === room.localParticipant.participantId);\n        Object.assign(room.localParticipant, castDraft(participant));\n        Object.assign(room.participants[pIndex], castDraft(participant));\n      });\n    case 'UPSERT_ROOM_REMOTE_PARTICIPANT':\n      return produce(prevState, draft => {\n        const {\n          roomId,\n          participant\n        } = action.payload;\n        const room = draft.rooms.find(c => c.roomId === roomId);\n        if (!room) return;\n        const index = room.remoteParticipants.findIndex(p => p.participantId === participant.participantId);\n        const pIndex = room.participants.findIndex(p => p.participantId === participant.participantId);\n        if (index === -1) {\n          const srp = castDraft(participant);\n          room.remoteParticipants.push(srp);\n          room.participants.push(srp);\n          return;\n        }\n        Object.assign(room.remoteParticipants[index], castDraft(participant));\n        Object.assign(room.participants[pIndex], castDraft(participant));\n      });\n    case 'DELETE_ROOM_REMOTE_PARTICIPANT':\n      return produce(prevState, draft => {\n        const {\n          roomId,\n          participantId\n        } = action.payload;\n        const room = draft.rooms.find(c => c.roomId === roomId);\n        if (!room) return;\n        const index = room.remoteParticipants.findIndex(p => p.participantId === participantId);\n        if (index === -1) return;\n        room.remoteParticipants.splice(index, 1);\n        const pIndex = room.participants.findIndex(p => p.participantId === participantId);\n        if (index === -1) return;\n        room.participants.splice(pIndex, 1);\n      });\n    case 'CLEAR_ROOMS':\n      return produce(prevState, draft => {\n        draft.rooms = castDraft(initialState.rooms);\n      });\n    case 'UPDATE_AUDIO_INPUT_DEVICE_INFO':\n      return produce(prevState, draft => {\n        draft.audioInputDeviceInfo = {\n          ...prevState.audioInputDeviceInfo,\n          ...action.payload\n        };\n      });\n    case 'UPDATE_AUDIO_OUTPUT_DEVICE_INFO':\n      return produce(prevState, draft => {\n        draft.audioOutputDeviceInfo = {\n          ...prevState.audioOutputDeviceInfo,\n          ...action.payload\n        };\n      });\n    case 'UPDATE_VIDEO_INPUT_DEVICE_INFO':\n      return produce(prevState, draft => {\n        draft.videoInputDeviceInfo = {\n          ...prevState.videoInputDeviceInfo,\n          ...action.payload\n        };\n      });\n    default:\n      return prevState;\n  }\n};","map":{"version":3,"names":["castDraft","produce","initialState","reducer","prevState","action","type","draft","user","payload","calls","push","isBusy","some","call","isEnded","end","index","findIndex","c","callId","Object","assign","rooms","roomId","participant","room","find","pIndex","participants","p","participantId","localParticipant","remoteParticipants","srp","splice","audioInputDeviceInfo","audioOutputDeviceInfo","videoInputDeviceInfo"],"sources":["C:/Users/HP/Desktop/neeee/quickstart-calls-reactjs/sample-01/src/lib/sendbird-calls/SbCallsContext/reducer.tsx"],"sourcesContent":["import { castDraft, produce } from 'immer';\r\n\r\nimport type { State } from './state';\r\nimport { initialState } from './state';\r\nimport type {\r\n  StatefulDirectCall,\r\n  StatefulRoom,\r\n  AudioInputDeviceInfo,\r\n  AudioOutputDeviceInfo,\r\n  VideoInputDeviceInfo,\r\n  StatefulLocalParticipant,\r\n  StatefulRemoteParticipant,\r\n} from './types';\r\nimport type { User as SBUser } from 'sendbird-calls';\r\n\r\n/** Actions */\r\nexport type Action =\r\n  | { type: 'AUTH'; payload: SBUser; }\r\n  | { type: 'DEAUTH'; }\r\n  | { type: 'ADD_CALL'; payload: StatefulDirectCall; }\r\n  | { type: 'RINGING'; payload: StatefulDirectCall; }\r\n  | { type: 'UPDATE_CALL', payload: Partial<StatefulDirectCall>; }\r\n  | { type: 'CLEAR_CALLS'; }\r\n  | { type: 'ADD_ROOM'; payload: StatefulRoom; }\r\n  | { type: 'UPDATE_ROOM', payload: Partial<StatefulRoom>; }\r\n  | { type: 'UPDATE_ROOM_LOCAL_PARTICIPANT', payload: { roomId: string; participant: Partial<StatefulLocalParticipant>; }; }\r\n  | { type: 'UPSERT_ROOM_REMOTE_PARTICIPANT', payload: { roomId: string; participant: Partial<StatefulRemoteParticipant>; }; }\r\n  | { type: 'DELETE_ROOM_REMOTE_PARTICIPANT', payload: { roomId: string; participantId: string; }; }\r\n  | { type: 'CLEAR_ROOMS'; }\r\n  | { type: 'UPDATE_AUDIO_INPUT_DEVICE_INFO'; payload: Partial<AudioInputDeviceInfo>; }\r\n  | { type: 'UPDATE_AUDIO_OUTPUT_DEVICE_INFO'; payload: Partial<AudioOutputDeviceInfo>; }\r\n  | { type: 'UPDATE_VIDEO_INPUT_DEVICE_INFO'; payload: Partial<VideoInputDeviceInfo>; }\r\n\r\n/** Reducer */\r\nexport const reducer = (prevState: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case 'AUTH':\r\n      return produce(prevState, draft => {\r\n        draft.user = action.payload;\r\n      });\r\n    case 'DEAUTH':\r\n      return initialState;\r\n    case 'ADD_CALL':\r\n      return produce(prevState, draft => {\r\n        draft.calls.push(castDraft(action.payload));\r\n      });\r\n    case 'RINGING': {\r\n      const isBusy = prevState.calls.some(call => !call.isEnded);\r\n      const call = action.payload;\r\n      if (isBusy) {\r\n        call.end();\r\n      }\r\n      return produce(prevState, draft => {\r\n        draft.calls.push(castDraft(call));\r\n      });\r\n    }\r\n    case 'UPDATE_CALL':\r\n      return produce(prevState, draft => {\r\n        const index = draft.calls.findIndex(c => c.callId === action.payload.callId);\r\n        if (index === -1) return;\r\n        Object.assign(draft.calls[index], castDraft(action.payload));\r\n      });\r\n    case 'CLEAR_CALLS':\r\n      return produce(prevState, draft => {\r\n        draft.calls = castDraft(initialState.calls);\r\n      });\r\n    case 'ADD_ROOM':\r\n      return produce(prevState, draft => {\r\n        draft.rooms.push(castDraft(action.payload));\r\n      });\r\n    case 'UPDATE_ROOM':\r\n      return produce(prevState, draft => {\r\n        const index = draft.rooms.findIndex(c => c.roomId === action.payload.roomId);\r\n        if (index === -1) return;\r\n        Object.assign(draft.rooms[index], castDraft(action.payload));\r\n      });\r\n    case 'UPDATE_ROOM_LOCAL_PARTICIPANT':\r\n      return produce(prevState, draft => {\r\n        const { roomId, participant } = action.payload;\r\n        const room = draft.rooms.find(c => c.roomId === roomId);\r\n        if (!room) return;\r\n\r\n        const pIndex = room.participants.findIndex(p => p.participantId === room.localParticipant.participantId);\r\n\r\n        Object.assign(room.localParticipant, castDraft(participant));\r\n        Object.assign(room.participants[pIndex], castDraft(participant));\r\n      });\r\n    case 'UPSERT_ROOM_REMOTE_PARTICIPANT':\r\n      return produce(prevState, draft => {\r\n        const { roomId, participant } = action.payload;\r\n        const room = draft.rooms.find(c => c.roomId === roomId);\r\n        if (!room) return;\r\n\r\n        const index = room.remoteParticipants.findIndex(p => p.participantId === participant.participantId);\r\n        const pIndex = room.participants.findIndex(p => p.participantId === participant.participantId);\r\n        if (index === -1) {\r\n          const srp = castDraft(participant as StatefulRemoteParticipant);\r\n          room.remoteParticipants.push(srp);\r\n          room.participants.push(srp);\r\n          return;\r\n        }\r\n\r\n        Object.assign(room.remoteParticipants[index], castDraft(participant));\r\n        Object.assign(room.participants[pIndex], castDraft(participant));\r\n      });\r\n    case 'DELETE_ROOM_REMOTE_PARTICIPANT':\r\n      return produce(prevState, draft => {\r\n        const { roomId, participantId } = action.payload;\r\n        const room = draft.rooms.find(c => c.roomId === roomId);\r\n        if (!room) return;\r\n\r\n        const index = room.remoteParticipants.findIndex(p => p.participantId === participantId);\r\n        if (index === -1) return;\r\n        room.remoteParticipants.splice(index, 1);\r\n\r\n        const pIndex = room.participants.findIndex(p => p.participantId === participantId);\r\n        if (index === -1) return;\r\n        room.participants.splice(pIndex, 1);\r\n      });\r\n    case 'CLEAR_ROOMS':\r\n      return produce(prevState, draft => {\r\n        draft.rooms = castDraft(initialState.rooms);\r\n      });\r\n    case 'UPDATE_AUDIO_INPUT_DEVICE_INFO':\r\n      return produce(prevState, draft => {\r\n        draft.audioInputDeviceInfo = { ...prevState.audioInputDeviceInfo, ...action.payload };\r\n      });\r\n    case 'UPDATE_AUDIO_OUTPUT_DEVICE_INFO':\r\n      return produce(prevState, draft => {\r\n        draft.audioOutputDeviceInfo = { ...prevState.audioOutputDeviceInfo, ...action.payload };\r\n      });\r\n    case 'UPDATE_VIDEO_INPUT_DEVICE_INFO':\r\n      return produce(prevState, draft => {\r\n        draft.videoInputDeviceInfo = { ...prevState.videoInputDeviceInfo, ...action.payload };\r\n      });\r\n    default:\r\n      return prevState;\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}